@page "/usuarios/edit/{Username}"
@attribute [Authorize(Roles = "Administrador")]

<PageTitle>Editar Usuario</PageTitle>

<div class="row justify-content-center">
    <div class="col-md-6">
        <h1 class="h3">Modificar Usuario</h1>

        @if (_turnos == null || _roles == null || _newModel == null)
        {
            <div class="d-flex justify-content-center my-5">
                <MudProgressCircular Color="Color.Info" Indeterminate="true" />
            </div>
        }
        else
        {
            <EditForm Model="@_newModel" Context="userContext" OnValidSubmit="OnValidUserSubmit">
                <DataAnnotationsValidator />

                <hr />

                <div class="mb-5">
                    <h2 class="h4"><b>@(DisplayName.GetDisplayName(_model, m => m.Username)):</b> @_model.Username</h2>
                </div>

                @if (_newModel.ForgotPassword)
                {
                    <div class="input-group justify-content-center mb-3">
                        <EditForm Model="@_passwordChangeModel" OnValidSubmit="OnValidPasswordSubmit">
                            <DataAnnotationsValidator />

                            <div class="mb-5">
                                <p class="h6" style="text-align: justify">
                                    Si este apartado aparece, significa que el usuario ha solicitado
                                    un cambio de contraseña. Rellene los siguientes campos y suba los
                                    cambios correspondientes.
                                </p>
                            </div>

                            <div class="input-group justify-content-center mb-3">
                                <MudTextField AdornmentColor="Color.Primary" OnlyValidateIfDirty="true"
                                      Variant="Variant.Outlined" InputType="@_passwordInputType"
                                      Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon"
                                      OnAdornmentClick="PasswordIconPressed" AdornmentAriaLabel="Show Password"
                                      Label="@(DisplayName.GetDisplayName(_passwordChangeModel, m => m.NewPassword))"
                                      HelperText="Debe contener al menos una mayúscula, un caracter
                                        especial y un número, además de 6 caracteres como mínimo."
                                      @bind-Value="_passwordChangeModel.NewPassword"
                                      For="@(() => _passwordChangeModel.NewPassword)" />
                            </div>

                            <div class="input-group justify-content-center mb-3">
                                <MudTextField AdornmentColor="Color.Primary" OnlyValidateIfDirty="true"
                                      Variant="Variant.Outlined" InputType="@_passwordConfirmType"
                                      Adornment="Adornment.End" AdornmentIcon="@_passwordConfirmIcon"
                                      OnAdornmentClick="ConfirmPasswordIconPressed" AdornmentAriaLabel="Show Password"
                                      Label="@(DisplayName.GetDisplayName(_passwordChangeModel, m => m.ConfirmNewPassword))"
                                      HelperText="La misma contraseña del campo anterior."
                                      @bind-Value="_passwordChangeModel.ConfirmNewPassword"
                                      For="@(() => _passwordChangeModel.ConfirmNewPassword)" />
                            </div>

                            <div class="input-group justify-content-end mb-3">
                                <MudButton ButtonType="ButtonType.Submit" Color="Color.Error"
                                   Variant="Variant.Filled" EndIcon="fa fa-sync-alt">
                                    Cambiar Contraseña
                                </MudButton>
                            </div>

                            <hr />
                        </EditForm>
                    </div>
                }

                <div class="input-group mb-3">
                    <MudTextField AdornmentColor="Color.Primary" OnlyValidateIfDirty="true"
                              Label="@(DisplayName.GetDisplayName(_model, m => m.Nombre))"
                              HelperText="La primer letra de cada nombre en mayúscula,
                                respetando acentos y demás temas gramaticales."
                              @bind-Value="_newModel.Nombre" For="@(() => _newModel.Nombre)"
                              Variant="Variant.Outlined" />
                </div>

                <div class="input-group mb-3">
                    <MudTextField AdornmentColor="Color.Primary" OnlyValidateIfDirty="true"
                              Label="@(DisplayName.GetDisplayName(_model, m => m.Apellido))"
                              HelperText="La primer letra de cada apellido en mayúscula,
                                respetando acentos y demás temas gramaticales."
                              @bind-Value="_newModel.Apellido" For="@(() => _newModel.Apellido)"
                              Variant="Variant.Outlined" />
                </div>

                <div class="input-group mb-3">
                    <MudSelect Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter"
                           Label="@(DisplayName.GetDisplayName(_model, m => m.IdTurno))"
                           HelperText="Puede mantenerse vacío."
                           @bind-Value="_newModel.IdTurno" For="@(() => _newModel.IdTurno)">
                        @foreach (TurnoDTO turno in _turnos)
                        {
                            <MudSelectItem T="int" Value="turno.Id">@turno.Descripcion</MudSelectItem>
                        }
                    </MudSelect>
                </div>

                <div class="input-group mb-3">
                    <MudSelect Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter"
                           Label="@(DisplayName.GetDisplayName(_newModel, m => m.Roles))"
                           HelperText="Pueden seleccionarse más de uno. Si se deja vacío se tomará
                            automáticamente como Intendente."
                           T="string" @bind-SelectedValues="_newModel.Roles" MultiSelection="true">
                        @foreach (string rol in _roles)
                        {
                            <MudSelectItem T="string" Value="rol">@rol</MudSelectItem>
                        }
                    </MudSelect>
                </div>

                <div class="input-group justify-content-center mb-3">
                    <MudRadioGroup @bind-SelectedOption="_newModel.Lockout" For="() => _newModel.Lockout"
                               T="bool">
                        <MudRadio Option="false" Color="Color.Primary">Habilitado</MudRadio>
                        <MudRadio Option="true" Color="Color.Primary">Deshabilitado</MudRadio>
                    </MudRadioGroup>
                </div>

                <hr />

                <div class="input-group justify-content-between mb-3">
                    <MudButton Href="usuarios" Color="Color.Secondary" Variant="Variant.Filled"
                           StartIcon="fa fa-angle-left">Regresar</MudButton>

                    <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled"
                           EndIcon="fa fa-check">Actualizar</MudButton>
                </div>
            </EditForm>
        }
    </div>
</div>
